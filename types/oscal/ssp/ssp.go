// Code generated by go generate; DO NOT EDIT.
package ssp

import (
	"github.com/docker/oscalkit/types/oscal/catalog"
)

//
type SystemSecurityPlan struct {

	// .
	Id string `xml:"id,attr,omitempty" json:"id,omitempty"`

	Metadata              *Metadata              `xml:"metadata,omitempty" json:"metadata,omitempty"`
	SystemCharacteristics *SystemCharacteristics `xml:"system-characteristics,omitempty" json:"systemCharacteristics,omitempty"`
	SystemImplementation  *SystemImplementation  `xml:"system-implementation,omitempty" json:"systemImplementation,omitempty"`
	ControlImplementation *ControlImplementation `xml:"control-implementation,omitempty" json:"controlImplementation,omitempty"`
	References            *References            `xml:"references,omitempty" json:"references,omitempty"`
	Attachment            *Attachment            `xml:"attachment,omitempty" json:"attachment,omitempty"`
	Imports               []Import               `xml:"import,omitempty" json:"imports,omitempty"`
}

// Contains the characteristics of the system, such as its name, purpose, and
// security impact level.
type SystemCharacteristics struct {
	SystemId                        *SystemId                       `xml:"system-id,omitempty" json:"systemId,omitempty"`
	SystemName                      SystemName                      `xml:"system-name,omitempty" json:"systemName,omitempty"`
	SystemNameShort                 SystemNameShort                 `xml:"system-name-short,omitempty" json:"systemNameShort,omitempty"`
	SecuritySensitivityLevel        SecuritySensitivityLevel        `xml:"security-sensitivity-level,omitempty" json:"securitySensitivityLevel,omitempty"`
	Status                          Status                          `xml:"status,omitempty" json:"status,omitempty"`
	StatusOtherDescription          StatusOtherDescription          `xml:"status-other-description,omitempty" json:"statusOtherDescription,omitempty"`
	DeploymentModel                 DeploymentModel                 `xml:"deployment-model,omitempty" json:"deploymentModel,omitempty"`
	DeploymentModelOtherDescription DeploymentModelOtherDescription `xml:"deployment-model-other-description,omitempty" json:"deploymentModelOtherDescription,omitempty"`
	ServiceModels                   []ServiceModel                  `xml:"service-model,omitempty" json:"service-models,omitempty"`
	ServiceModelDescriptions        []ServiceModelOtherDescription  `xml:"service-model-other-description,omitempty" json:"service-model-other-descriptions,omitempty"`
	Description                     *Description                    `xml:"description,omitempty" json:"description,omitempty"`
	SystemInformation               *SystemInformation              `xml:"system-information,omitempty" json:"systemInformation,omitempty"`
	SecurityImpactLevel             *SecurityImpactLevel            `xml:"security-impact-level,omitempty" json:"securityImpactLevel,omitempty"`
	SecurityEauth                   *SecurityEauth                  `xml:"security-eauth,omitempty" json:"securityEauth,omitempty"`
	LeveragedAuthorizations         *LeveragedAuthorizations        `xml:"leveraged-authorizations,omitempty" json:"leveragedAuthorizations,omitempty"`
	AuthorizationBoundary           *AuthorizationBoundary          `xml:"authorization-boundary,omitempty" json:"authorizationBoundary,omitempty"`
	NetworkArchitecture             *NetworkArchitecture            `xml:"network-architecture,omitempty" json:"networkArchitecture,omitempty"`
	DataFlow                        *DataFlow                       `xml:"data-flow,omitempty" json:"dataFlow,omitempty"`
	Users                           *Users                          `xml:"users,omitempty" json:"users,omitempty"`
}

// A free-text description of the system.
type Description struct {
	Prose *catalog.Prose `xml:",any" json:"prose,omitempty"`
}

// Contains details about all types of information stored, processed, or
// transmitted by the system, such as privacy information, and NIST 800-60
// information types.
type SystemInformation struct {
	SspInformationType []InformationType `xml:"information-type,omitempty" json:"information-types,omitempty"`
	SspDesignations    []Designations    `xml:"designations,omitempty" json:"designations,omitempty"`
}

// Used to enumerate all special information type designations that may be required
// by a specific organization or compliance regiem, such as privacy impact
// information (PII), or payment card information (PCI).
type Designations struct {
	SspDesignation []Designation `xml:"designation,omitempty" json:"designations,omitempty"`
}

// Used when a specific organization or compliance regiem requires certain
// information types to be explicitly cited, such as privacy impact information
// (PII), or payment card information (PCI).
type Designation struct {

	// .
	Id string `xml:"id,attr,omitempty" json:"id,omitempty"`

	Title         Title        `xml:"title,omitempty" json:"title,omitempty"`
	Declaration   Declaration  `xml:"declaration,omitempty" json:"declaration,omitempty"`
	SspQualifiers []Qualifiers `xml:"qualifiers,omitempty" json:"qualifiers,omitempty"`
}

// A list of questions about the system that contribute to the establishment of a
// designation, such as the FedRAMP privacy threshold analysis questions.
type Qualifiers struct {
	SspQualifiers []Qualifier `xml:"qualifier,omitempty" json:"qualifiers,omitempty"`
}

// An individual questions about the system that contributes to the establishment
// of a designation, such as a FedRAMP privacy threshold analysis question.
type Qualifier struct {

	// .
	Id string `xml:"id,attr,omitempty" json:"id,omitempty"`

	QualQuestion QualQuestion `xml:"qual-question,omitempty" json:"qualQuestion,omitempty"`
	QualResponse QualResponse `xml:"qual-response,omitempty" json:"qualResponse,omitempty"`
	QualNotes    QualNotes    `xml:"qual-notes,omitempty" json:"qualNotes,omitempty"`
}

// Contains details about one type of information stored, processed, or transmitted
// by the system, such as privacy information, and NIST 800-60 information types.
type InformationType struct {

	// .
	Id string `xml:"id,attr,omitempty" json:"id,omitempty"`
	// Pointer to the information type in NIST SP 800-60.
	NistId string `xml:"nist-id,attr,omitempty" json:"nistId,omitempty"`

	Description           *Description           `xml:"description,omitempty" json:"description,omitempty"`
	ConfidentialityImpact *ConfidentialityImpact `xml:"confidentiality-impact,omitempty" json:"confidentialityImpact,omitempty"`
	IntegrityImpact       *IntegrityImpact       `xml:"integrity-impact,omitempty" json:"integrityImpact,omitempty"`
	AvailabilityImpact    *AvailabilityImpact    `xml:"availability-impact,omitempty" json:"availabilityImpact,omitempty"`
}

//
type ConfidentialityImpact struct {
	Base                    Base                    `xml:"base,omitempty" json:"base,omitempty"`
	Selected                Selected                `xml:"selected,omitempty" json:"selected,omitempty"`
	AdjustmentJustification AdjustmentJustification `xml:"adjustment-justification,omitempty" json:"adjustmentJustification,omitempty"`
}

//
type IntegrityImpact struct {
	Base                    Base                    `xml:"base,omitempty" json:"base,omitempty"`
	Selected                Selected                `xml:"selected,omitempty" json:"selected,omitempty"`
	AdjustmentJustification AdjustmentJustification `xml:"adjustment-justification,omitempty" json:"adjustmentJustification,omitempty"`
}

//
type AvailabilityImpact struct {
	Base                    Base                    `xml:"base,omitempty" json:"base,omitempty"`
	Selected                Selected                `xml:"selected,omitempty" json:"selected,omitempty"`
	AdjustmentJustification AdjustmentJustification `xml:"adjustment-justification,omitempty" json:"adjustmentJustification,omitempty"`
}

//
type SecurityImpactLevel struct {
	SecurityObjectiveConfidentiality SecurityObjectiveConfidentiality `xml:"security-objective-confidentiality,omitempty" json:"securityObjectiveConfidentiality,omitempty"`
	SecurityObjectiveIntegrity       SecurityObjectiveIntegrity       `xml:"security-objective-integrity,omitempty" json:"securityObjectiveIntegrity,omitempty"`
	SecurityObjectiveAvailability    SecurityObjectiveAvailability    `xml:"security-objective-availability,omitempty" json:"securityObjectiveAvailability,omitempty"`
}

//
type SecurityEauth struct {
	SecurityAuthIal    SecurityAuthIal    `xml:"security-auth-ial,omitempty" json:"securityAuthIal,omitempty"`
	SecurityAuthAal    SecurityAuthAal    `xml:"security-auth-aal,omitempty" json:"securityAuthAal,omitempty"`
	SecurityAuthFal    SecurityAuthFal    `xml:"security-auth-fal,omitempty" json:"securityAuthFal,omitempty"`
	SecurityEauthLevel SecurityEauthLevel `xml:"security-eauth-level,omitempty" json:"securityEauthLevel,omitempty"`
}

// All leveraged authorizations for this system.
type LeveragedAuthorizations struct {
	SspLeveragedAuthorization []LeveragedAuthorization `xml:"leveraged-authorization,omitempty" json:"leveraged-authorizations,omitempty"`
}

// The details for a single leveraged authorization
type LeveragedAuthorization struct {

	// .
	Id string `xml:"id,attr,omitempty" json:"id,omitempty"`

	LeveragedAuthorizationName            LeveragedAuthorizationName            `xml:"leveraged-authorization-name,omitempty" json:"leveragedAuthorizationName,omitempty"`
	LeveragedAuthorizationServiceProvider LeveragedAuthorizationServiceProvider `xml:"leveraged-authorization-service-provider,omitempty" json:"leveragedAuthorizationServiceProvider,omitempty"`
	LeveragedAuthorizationDateGranted     LeveragedAuthorizationDateGranted     `xml:"leveraged-authorization-date-granted,omitempty" json:"leveragedAuthorizationDateGranted,omitempty"`
}

//
type AuthorizationBoundary struct {
	SspBoundaryDiagram []BoundaryDiagram `xml:"boundary-diagram,omitempty" json:"boundary-diagrams,omitempty"`
}

//
type BoundaryDiagram struct {

	// .
	Id string `xml:"id,attr,omitempty" json:"id,omitempty"`
	// Unique attachment identifier.
	AttachmentId string `xml:"attachment-id,attr,omitempty" json:"attachmentId,omitempty"`

	BoundaryDescription *BoundaryDescription `xml:"boundary-description,omitempty" json:"boundaryDescription,omitempty"`
}

//
type BoundaryDescription struct {
	Prose *catalog.Prose `xml:",any" json:"prose,omitempty"`
}

//
type NetworkArchitecture struct {
	SspNetworkBoundary []NetworkDiagram `xml:"network-diagram,omitempty" json:"network-diagrams,omitempty"`
}

//
type NetworkDiagram struct {

	// .
	Id string `xml:"id,attr,omitempty" json:"id,omitempty"`
	// Unique attachment identifier.
	AttachmentId string `xml:"attachment-id,attr,omitempty" json:"attachmentId,omitempty"`

	NetworkDescription *NetworkDescription `xml:"network-description,omitempty" json:"networkDescription,omitempty"`
}

//
type NetworkDescription struct {
	Prose *catalog.Prose `xml:",any" json:"prose,omitempty"`
}

//
type DataFlow struct {
	SspDataFlowDiagram []DataFlowDiagram `xml:"data-flow-diagram,omitempty" json:"data-flow-diagrams,omitempty"`
}

//
type DataFlowDiagram struct {

	// .
	Id string `xml:"id,attr,omitempty" json:"id,omitempty"`
	// Unique attachment identifier.
	AttachmentId string `xml:"attachment-id,attr,omitempty" json:"attachmentId,omitempty"`

	DataFlowDescription *DataFlowDescription `xml:"data-flow-description,omitempty" json:"dataFlowDescription,omitempty"`
}

//
type DataFlowDescription struct {
	Prose *catalog.Prose `xml:",any" json:"prose,omitempty"`
}

// Provides all user roles.
type Users struct {
	Statistics *Statistics `xml:"statistics,omitempty" json:"statistics,omitempty"`
	Roles      []Role      `xml:"role,omitempty" json:"roles,omitempty"`
}

// Defining a role to be assigned to a party or agent
type Role struct {

	// .
	Id string `xml:"id,attr,omitempty" json:"id,omitempty"`
	// Name allows the information to be named.
	Name string `xml:"name,attr,omitempty" json:"name,omitempty"`
	// .
	External string `xml:"external,attr,omitempty" json:"external,omitempty"`
	// .
	Access string `xml:"access,attr,omitempty" json:"access,omitempty"`
	// .
	SensitivityLevel string `xml:"sensitivity-level,attr,omitempty" json:"sensitivityLevel,omitempty"`

	Title            Title            `xml:"title,omitempty" json:"title,omitempty"`
	ShortName        ShortName        `xml:"short-name,omitempty" json:"shortName,omitempty"`
	Desc             Desc             `xml:"desc,omitempty" json:"desc,omitempty"`
	Privileges       []Privilege      `xml:"privilege,omitempty" json:"privileges,omitempty"`
	Responsibilities []Responsibility `xml:"responsibility,omitempty" json:"responsibilities,omitempty"`
}

// Provides a collection of statistics about users of the system.
type Statistics struct {
	InternalUserTotalCurrent InternalUserTotalCurrent `xml:"internal-user-total-current,omitempty" json:"internalUserTotalCurrent,omitempty"`
	InternalUserTotalFuture  InternalUserTotalFuture  `xml:"internal-user-total-future,omitempty" json:"internalUserTotalFuture,omitempty"`
	ExternalUserTotalCurrent ExternalUserTotalCurrent `xml:"external-user-total-current,omitempty" json:"externalUserTotalCurrent,omitempty"`
	ExternalUserTotalFuture  ExternalUserTotalFuture  `xml:"external-user-total-future,omitempty" json:"externalUserTotalFuture,omitempty"`
}

// Provides information as to how the system is implemented.
type SystemImplementation struct {

	// Are their system interconnections? (Yes/No)
	Interconnected string `xml:"interconnected,attr,omitempty" json:"interconnected,omitempty"`

	PortsProtocolsServices *PortsProtocolsServices `xml:"ports-protocols-services,omitempty" json:"portsProtocolsServices,omitempty"`
	SystemInventory        *SystemInventory        `xml:"system-inventory,omitempty" json:"systemInventory,omitempty"`
	SspInterconnection     []Interconnection       `xml:"interconnection,omitempty" json:"interconnections,omitempty"`
	Components             []Component             `xml:"component,omitempty" json:"components,omitempty"`
}

// A collection of the ports, protocols, and services used within the system.
type PortsProtocolsServices struct {
	SspService []Service `xml:"service,omitempty" json:"services,omitempty"`
}

// A collection of information about an individual service within the system.
type Service struct {

	// .
	Id string `xml:"id,attr,omitempty" json:"id,omitempty"`
	// Name allows the information to be named.
	Name string `xml:"name,attr,omitempty" json:"name,omitempty"`

	Purpose        Purpose    `xml:"purpose,omitempty" json:"purpose,omitempty"`
	ComponentUsers []UsedBy   `xml:"used-by,omitempty" json:"used-bies,omitempty"`
	SspProtocol    []Protocol `xml:"protocol,omitempty" json:"protocols,omitempty"`
}

// Information about the protocol used to provide a service.
type Protocol struct {

	// Name allows the information to be named.
	Name string `xml:"name,attr,omitempty" json:"name,omitempty"`

	PortRanges []PortRange `xml:"port-range,omitempty" json:"port-ranges,omitempty"`
}

// Details on an individual system interconnection.
type Interconnection struct {

	// .
	Id string `xml:"id,attr,omitempty" json:"id,omitempty"`

	ExternalSystemName ExternalSystemName `xml:"external-system-name,omitempty" json:"externalSystemName,omitempty"`
	ExternalSystemOrg  ExternalSystemOrg  `xml:"external-system-org,omitempty" json:"externalSystemOrg,omitempty"`
	IsaName            IsaName            `xml:"isa-name,omitempty" json:"isaName,omitempty"`
	IsaDate            IsaDate            `xml:"isa-date,omitempty" json:"isaDate,omitempty"`
	IsaAuthorizations  []IsaAuthorization `xml:"isa-authorization,omitempty" json:"isa-authorizations,omitempty"`
}

// .
type Component struct {

	// Type designates the type of information provided.
	Type string `xml:"type,attr,omitempty" json:"type,omitempty"`
	// .
	Id string `xml:"id,attr,omitempty" json:"id,omitempty"`

	Subcomponents      []Subcomponent    `xml:"subcomponent,omitempty" json:"subcomponents,omitempty"`
	SspOrigin          []Origin          `xml:"origin,omitempty" json:"origins,omitempty"`
	SspCharacteristics []Characteristics `xml:"characteristics,omitempty" json:"characteristics,omitempty"`
	SspSatisfaction    []Satisfaction    `xml:"satisfaction,omitempty" json:"satisfactions,omitempty"`
	Validations        []Validation      `xml:"validation,omitempty" json:"validations,omitempty"`
	SspProvisioning    []Provisioning    `xml:"provisioning,omitempty" json:"provisionings,omitempty"`
}

// .
type Origin struct {

	// .
	Id string `xml:"id,attr,omitempty" json:"id,omitempty"`

	Organization Organization `xml:"organization,omitempty" json:"organization,omitempty"`
	Title        Title        `xml:"title,omitempty" json:"title,omitempty"`
	Version      *Version     `xml:"version,omitempty" json:"version,omitempty"`
	ReleaseDate  ReleaseDate  `xml:"release-date,omitempty" json:"releaseDate,omitempty"`
	Model        Model        `xml:"model,omitempty" json:"model,omitempty"`
	SspPart      []Part       `xml:"part,omitempty" json:"parts,omitempty"`
}

// .
type Part struct {

	// Identifies the property or object within the control; a semantic hint
	Class string `xml:"class,attr,omitempty" json:"class,omitempty"`
	// A relative or absolute URI indicating a resource available on the Internet.
	Href *catalog.Href `xml:"href,attr,omitempty" json:"href,omitempty"`

	TelephoneNumbers []Phone `xml:"phone,omitempty" json:"phones,omitempty"`
	EmailAddresses   []Email `xml:"email,omitempty" json:"emails,omitempty"`
}

// Component characteristics, assets and configuration information
type Characteristics struct {

	// Context designates the context of information provided.
	Context string `xml:"context,attr,omitempty" json:"context,omitempty"`

	IpAddresses []IpAddress `xml:"ip-address,omitempty" json:"ip-addresses,omitempty"`
	SspService  []Service   `xml:"service,omitempty" json:"services,omitempty"`
	SspPart     []Part      `xml:"part,omitempty" json:"parts,omitempty"`
}

// Describes how the indicated control is satisfied by this component
type Satisfaction struct {

	// .
	Id string `xml:"id,attr,omitempty" json:"id,omitempty"`
	// Context designates the context of information provided.
	Context string `xml:"context,attr,omitempty" json:"context,omitempty"`

	Prose *catalog.Prose `xml:",any" json:"prose,omitempty"`
}

// .
type SystemInventory struct {
	InventoryItems []InventoryItem `xml:"inventory-item,omitempty" json:"inventory-items,omitempty"`
}

// .
type InventoryItem struct {

	// .
	Id string `xml:"id,attr,omitempty" json:"id,omitempty"`
	// ID of a linked or imported component
	ComponentId string `xml:"component-id,attr,omitempty" json:"componentId,omitempty"`
	// Designates an asset as either virtual (="yes") or physical (="no").
	Virtual string `xml:"virtual,attr,omitempty" json:"virtual,omitempty"`
	// Designates an asset as either publicly accessible (="yes") or not (="no").
	Public string `xml:"public,attr,omitempty" json:"public,omitempty"`

	Comments            Comments             `xml:"comments,omitempty" json:"comments,omitempty"`
	SerialNo            SerialNo             `xml:"serial-no,omitempty" json:"serialNo,omitempty"`
	IpAddresses         []IpAddress          `xml:"ip-address,omitempty" json:"ip-addresses,omitempty"`
	DnsNames            []DnsName            `xml:"dns-name,omitempty" json:"dns-names,omitempty"`
	NetworkIds          []NetworkId          `xml:"network-id,omitempty" json:"network-ids,omitempty"`
	AssetOwners         []AssetOwner         `xml:"asset-owner,omitempty" json:"asset-owners,omitempty"`
	AssetAdministrators []AssetAdministrator `xml:"asset-administrator,omitempty" json:"asset-administrators,omitempty"`
	SspHostItem         []HostItem           `xml:"host-item,omitempty" json:"host-items,omitempty"`
	SspSoftwareItem     []SoftwareItem       `xml:"software-item,omitempty" json:"software-items,omitempty"`
}

//
type HostItem struct {
	NetbiosNames       []NetbiosName       `xml:"netbios-name,omitempty" json:"netbios-names,omitempty"`
	MacAddresses       []MacAddress        `xml:"mac-address,omitempty" json:"mac-addresses,omitempty"`
	AuthenticatedScans []AuthenticatedScan `xml:"authenticated-scan,omitempty" json:"authenticated-scans,omitempty"`
	BaselineTemplates  []BaselineTemplate  `xml:"baseline-template,omitempty" json:"baseline-templates,omitempty"`
	OsNames            []OsName            `xml:"os-name,omitempty" json:"os-names,omitempty"`
	OsVersions         []OsVersion         `xml:"os-version,omitempty" json:"os-versions,omitempty"`
	Locations          []Location          `xml:"location,omitempty" json:"locations,omitempty"`
	AssetTypes         []AssetType         `xml:"asset-type,omitempty" json:"asset-types,omitempty"`
	Vendors            []Vendor            `xml:"vendor,omitempty" json:"vendors,omitempty"`
	HardwareModels     []HardwareModel     `xml:"hardware-model,omitempty" json:"hardware-models,omitempty"`
	SspScanned         []Scanned           `xml:"scanned,omitempty" json:"scanneds,omitempty"`
	Properties         []Prop              `xml:"prop,omitempty" json:"props,omitempty"`
}

//
type SoftwareItem struct {
	Vendors             []Vendor             `xml:"vendor,omitempty" json:"vendors,omitempty"`
	SoftwareNames       []SoftwareName       `xml:"software-name,omitempty" json:"software-names,omitempty"`
	SoftwareVersions    []SoftwareVersion    `xml:"software-version,omitempty" json:"software-versions,omitempty"`
	SoftwarePatchLevels []SoftwarePatchLevel `xml:"software-patch-level,omitempty" json:"software-patch-levels,omitempty"`
	Functions           []Function           `xml:"function,omitempty" json:"functions,omitempty"`
}

//
type ControlImplementation struct {
	Controls []Control `xml:"control,omitempty" json:"controls,omitempty"`
}

// Information related to the implementation of an individual control.
type Control struct {

	// Identifies the property or object within the control; a semantic hint
	Class string `xml:"class,attr,omitempty" json:"class,omitempty"`
	// Pointer to a control, by its ID
	ControlId string `xml:"control-id,attr,omitempty" json:"controlId,omitempty"`
	// A relative or absolute URI indicating a resource available on the Internet.
	Href *catalog.Href `xml:"href,attr,omitempty" json:"href,omitempty"`

	SspResponsibleRole []ResponsibleRole `xml:"responsible-role,omitempty" json:"responsible-roles,omitempty"`
	Properties         []Prop            `xml:"prop,omitempty" json:"props,omitempty"`
	ParameterSettings  []SetParam        `xml:"set-param,omitempty" json:"set-params,omitempty"`
	ControlResponses   []ControlResponse `xml:"control-response,omitempty" json:"control-responses,omitempty"`
}

// Identifies the parameter that will be filled in by the enclosed value element.
type SetParam struct {

	// Points to a parameter within a control, to which the contained value will be
	// assigned.
	ParamId string `xml:"param-id,attr,omitempty" json:"paramId,omitempty"`
	// Provides for an indication of a link target, by its label, when no ID is
	// available
	Target string `xml:"target,attr,omitempty" json:"target,omitempty"`

	Value Value `xml:"value,omitempty" json:"value,omitempty"`
}

// Describes how a control is implemented.
type ControlResponse struct {

	// Pointer to a speific requirement statement within a control.
	StmtId string `xml:"stmt-id,attr,omitempty" json:"stmtId,omitempty"`

	Prose *catalog.Prose `xml:",any" json:"prose,omitempty"`
}

// A group of reference descriptions
type References struct {

	// .
	Id string `xml:"id,attr,omitempty" json:"id,omitempty"`

	Links []Link `xml:"link,omitempty" json:"links,omitempty"`
	Refs  []Ref  `xml:"ref,omitempty" json:"refs,omitempty"`
}

// A reference, with one or more citations to standards, related documents, or
// other resources
type Ref struct {

	// .
	Id string `xml:"id,attr,omitempty" json:"id,omitempty"`
	// Identifies the reference type, such as a law, standard, guidance.
	RefType string `xml:"ref-type,attr,omitempty" json:"refType,omitempty"`

	Citations []Citation `xml:"citation,omitempty" json:"citations,omitempty"`

	Prose *catalog.Prose `xml:",any" json:"prose,omitempty"`
}

// .
type Attachment struct {

	// .
	Id string `xml:"id,attr,omitempty" json:"id,omitempty"`

	Title          Title          `xml:"title,omitempty" json:"title,omitempty"`
	Format         Format         `xml:"format,omitempty" json:"format,omitempty"`
	Date           Date           `xml:"date,omitempty" json:"date,omitempty"`
	Version        *Version       `xml:"version,omitempty" json:"version,omitempty"`
	AttachmentType AttachmentType `xml:"attachment-type,omitempty" json:"attachmentType,omitempty"`
	Base64         *Base64        `xml:"base64,omitempty" json:"base64,omitempty"`
	Description    *Description   `xml:"description,omitempty" json:"description,omitempty"`
}

// .
type Validation struct {
	Prose *catalog.Prose `xml:",any" json:"prose,omitempty"`
}

// .
type Provisioning struct {
	Prose *catalog.Prose `xml:",any" json:"prose,omitempty"`
}

// Information describing the publication or availability of this document
type Metadata struct {
	Title               Title           `xml:"title,omitempty" json:"title,omitempty"`
	PublicationDate     PublicationDate `xml:"publication-date,omitempty" json:"publicationDate,omitempty"`
	Version             *Version        `xml:"version,omitempty" json:"version,omitempty"`
	Authors             []Author        `xml:"author,omitempty" json:"authors,omitempty"`
	DocumentIdentifiers []DocId         `xml:"doc-id,omitempty" json:"doc-ids,omitempty"`
	Properties          []Prop          `xml:"prop,omitempty" json:"props,omitempty"`
	Notes               *Notes          `xml:"notes,omitempty" json:"notes,omitempty"`
	ExtraMeta           *ExtraMeta      `xml:"extra-meta,omitempty" json:"extraMeta,omitempty"`
	HashedLinks         []Hlink         `xml:"hlink,omitempty" json:"hlinks,omitempty"`
	Resources           []Resource      `xml:"resource,omitempty" json:"resources,omitempty"`
	Roles               []Role          `xml:"role,omitempty" json:"roles,omitempty"`
	Parties             []Party         `xml:"party,omitempty" json:"parties,omitempty"`
}

// A responsible entity, either singular (an organization or person) or collective
// (multiple persons)
type Party struct {

	// .
	Id string `xml:"id,attr,omitempty" json:"id,omitempty"`
	// In the context of a responsibility element, this points to a role in the users
	// element responsible for this control
	RoleId string `xml:"role-id,attr,omitempty" json:"roleId,omitempty"`

	Org     *Org     `xml:"org,omitempty" json:"org,omitempty"`
	Notes   *Notes   `xml:"notes,omitempty" json:"notes,omitempty"`
	Persons []Person `xml:"person,omitempty" json:"people,omitempty"`
}

// A person, with contact information
type Person struct {
	PersonName              PersonName `xml:"person-name,omitempty" json:"personName,omitempty"`
	ShortName               ShortName  `xml:"short-name,omitempty" json:"shortName,omitempty"`
	OrgName                 OrgName    `xml:"org-name,omitempty" json:"orgName,omitempty"`
	PersonIdentifiers       []PersonId `xml:"person-id,omitempty" json:"person-ids,omitempty"`
	OrganizationIdentifiers []OrgId    `xml:"org-id,omitempty" json:"org-ids,omitempty"`
	EmailAddresses          []Email    `xml:"email,omitempty" json:"emails,omitempty"`
	TelephoneNumbers        []Phone    `xml:"phone,omitempty" json:"phones,omitempty"`
	URLs                    []Url      `xml:"url,omitempty" json:"urls,omitempty"`
	Address                 *Address   `xml:"address,omitempty" json:"address,omitempty"`
	Notes                   *Notes     `xml:"notes,omitempty" json:"notes,omitempty"`
}

// An organization or legal entity (not a person), with contact information
type Org struct {
	OrgName                 OrgName   `xml:"org-name,omitempty" json:"orgName,omitempty"`
	ShortName               ShortName `xml:"short-name,omitempty" json:"shortName,omitempty"`
	OrganizationIdentifiers []OrgId   `xml:"org-id,omitempty" json:"org-ids,omitempty"`
	EmailAddresses          []Email   `xml:"email,omitempty" json:"emails,omitempty"`
	TelephoneNumbers        []Phone   `xml:"phone,omitempty" json:"phones,omitempty"`
	URLs                    []Url     `xml:"url,omitempty" json:"urls,omitempty"`
	Address                 *Address  `xml:"address,omitempty" json:"address,omitempty"`
	Notes                   *Notes    `xml:"notes,omitempty" json:"notes,omitempty"`
}

// A pointer to an external document with optional hash for verification
type Hlink struct {

	// A relative or absolute URI indicating a resource available on the Internet.
	Href *catalog.Href `xml:"href,attr,omitempty" json:"href,omitempty"`
	// Purpose of the link
	Rel string `xml:"rel,attr,omitempty" json:"rel,omitempty"`
	// Describes the media or MIME type of a linked resource
	MediaType string `xml:"media-type,attr,omitempty" json:"mediaType,omitempty"`

	Title  Title  `xml:"title,omitempty" json:"title,omitempty"`
	Hashes []Hash `xml:"hash,omitempty" json:"hashes,omitempty"`
}

// A postal address
type Address struct {
	City          City       `xml:"city,omitempty" json:"city,omitempty"`
	State         State      `xml:"state,omitempty" json:"state,omitempty"`
	PostalCode    PostalCode `xml:"postal-code,omitempty" json:"postalCode,omitempty"`
	Country       Country    `xml:"country,omitempty" json:"country,omitempty"`
	PostalAddress []AddrLine `xml:"addr-line,omitempty" json:"addr-lines,omitempty"`
}

// Any notes with further information
type Notes struct {
	Prose *catalog.Prose `xml:",any" json:"prose,omitempty"`
}

// A resource to inform or authenticate the present document.
type Resource struct {

	// Type designates the type of information provided.
	Type string `xml:"type,attr,omitempty" json:"type,omitempty"`
	// Describes the media or MIME type of a linked resource
	MediaType string `xml:"media-type,attr,omitempty" json:"mediaType,omitempty"`

	Title               Title           `xml:"title,omitempty" json:"title,omitempty"`
	PublicationDate     PublicationDate `xml:"publication-date,omitempty" json:"publicationDate,omitempty"`
	Version             *Version        `xml:"version,omitempty" json:"version,omitempty"`
	Authors             []Author        `xml:"author,omitempty" json:"authors,omitempty"`
	DocumentIdentifiers []DocId         `xml:"doc-id,omitempty" json:"doc-ids,omitempty"`
	Properties          []Prop          `xml:"prop,omitempty" json:"props,omitempty"`
	Notes               *Notes          `xml:"notes,omitempty" json:"notes,omitempty"`
	HashedLinks         []Hlink         `xml:"hlink,omitempty" json:"hlinks,omitempty"`
}

// Container for (system-defined) metadata
type ExtraMeta struct {
	Notes          *Notes      `xml:"notes,omitempty" json:"notes,omitempty"`
	MetadataFields []Meta      `xml:"meta,omitempty" json:"meta,omitempty"`
	MetadataGroups []MetaGroup `xml:"meta-group,omitempty" json:"meta-groups,omitempty"`
}

// Custom- or application-defined annotated metadata.
type MetaGroup struct {

	// A classification (according to any schema or taxonomy) of a metadata value or
	// set of values.
	Term string `xml:"term,attr,omitempty" json:"term,omitempty"`
	// Type designates the type of information provided.
	Type string `xml:"type,attr,omitempty" json:"type,omitempty"`

	MetadataFields []Meta      `xml:"meta,omitempty" json:"meta,omitempty"`
	Notes          *Notes      `xml:"notes,omitempty" json:"notes,omitempty"`
	MetadataGroups []MetaGroup `xml:"meta-group,omitempty" json:"meta-groups,omitempty"`
}

// Makes information from an external component file available to this component
// file.
type Import struct {

	// A relative or absolute URI indicating a resource available on the Internet.
	Href *catalog.Href `xml:"href,attr,omitempty" json:"href,omitempty"`

	Include *Include `xml:"include,omitempty" json:"include,omitempty"`
}

// Specifies which controls and subcontrols to include from the resource (source
// catalog) being imported
type Include struct {
	All   *All   `xml:"all,omitempty" json:"all,omitempty"`
	Calls []Call `xml:"call,omitempty" json:"calls,omitempty"`
}

//
type SystemId struct {
	// Type designates the type of information provided.
	Type  string `xml:"type,attr,omitempty" json:"type,omitempty"`
	Value string `xml:",chardata" json:"value,omitempty"`
}

//
type SystemName string

//
type SystemNameShort string

//
type SecuritySensitivityLevel string

// Identifies whether a specific designation applies to this system.
type Declaration string

// A question that must be answered about this system.
type QualQuestion string

// The response to the question.
type QualResponse string

// Additional information about the response to the question.
type QualNotes string

// The prescribed base (Confidentiality, Integrity, or Availability) security
// impact level.
type Base string

// The selected (Confidentiality, Integrity, or Availability) security impact
// level.
type Selected string

// If the selected security level is different from the base security level, this
// contains the justificaiton for the change.
type AdjustmentJustification string

//
type SecurityObjectiveConfidentiality string

//
type SecurityObjectiveIntegrity string

//
type SecurityObjectiveAvailability string

//
type SecurityAuthIal string

//
type SecurityAuthAal string

//
type SecurityAuthFal string

//
type SecurityEauthLevel string

//
type Status string

//
type StatusOtherDescription string

//
type DeploymentModel string

//
type DeploymentModelOtherDescription string

//
type ServiceModel string

//
type ServiceModelOtherDescription string

// Name of the leveraged system.
type LeveragedAuthorizationName string

// Name of the service provider that manages the leveraged system.
type LeveragedAuthorizationServiceProvider string

// The date the leveraged system received its authorization.
type LeveragedAuthorizationDateGranted string

// Identifies the type/level of system privilege for the role. For FedRAMP, the
// only valid values are "p" (Privileged), "np" (Non-Privileged), or "nla" (No
// Logical Access).
type Privilege string

// Identifies the functions performed by the user role.
type Responsibility string

//
type InternalUserTotalCurrent string

//
type InternalUserTotalFuture string

//
type ExternalUserTotalCurrent string

//
type ExternalUserTotalFuture string

//
type PortRange struct {
	// Indicates the starting port number in a port range.
	Start string `xml:"start,attr,omitempty" json:"start,omitempty"`

	// Indicates the ending port number in a port range.
	End string `xml:"end,attr,omitempty" json:"end,omitempty"`

	// Indicates the transport type.
	Transport string `xml:"transport,attr,omitempty" json:"transport,omitempty"`
	Value     string `xml:",chardata" json:"value,omitempty"`
}

// Describes the purpose for the service within the system.
type Purpose string

// Identifies the types of system component that uses the service. One entry per
type UsedBy string

//
type ExternalSystemName string

//
type ExternalSystemOrg string

// Name of the individual who authorized the Interconnection Security Agreement
// (ISA).
type IsaAuthorization string

// Title of the Interconnection Security Agreement (ISA).
type IsaName string

// Date of the Interconnection Security Agreement (ISA).
type IsaDate string

// .
type Vendor struct {
	// .
	Id string `xml:"id,attr,omitempty" json:"id,omitempty"`

	// Type designates the type of information provided.
	Type  string `xml:"type,attr,omitempty" json:"type,omitempty"`
	Value string `xml:",chardata" json:"value,omitempty"`
}

// .
type ReleaseDate string

// .
type Model string

// Use the @type flag to deisgnate IPv4 or IPv6.
type IpAddress struct {
	// Type designates the type of information provided.
	Type  string `xml:"type,attr,omitempty" json:"type,omitempty"`
	Value string `xml:",chardata" json:"value,omitempty"`
}

// If available, state the DNS name or URL of the inventory item. This can be left
// blank if one does not exist, or it is a dynamic field.
type DnsName string

// If available, state the NetBIOS name of the inventory item. This can be omitted
// if one does not exist, or it is a dynamic field.
type NetbiosName string

// If available, state the MAC Address of the inventory item. This can be left
// blank if one does not exist, or it is a dynamic field.
type MacAddress string

// .
type OsName string

// .
type OsVersion string

// Physical location of hardware. Could include Data Center ID, Cage#, Rack# or
// other meaningful location identifiers.
type Location string

// Simple description of the asset's function (e.g., Router, Storage Array, DNS
// Server, etc.) Do not use vendor or product names here.
type AssetType string

// Model number of the hardware.
type HardwareModel string

// Indicate whether this asset is planned for authenticated scanning.
type AuthenticatedScan string

// .
type SoftwareName string

// .
type SoftwareVersion string

// .
type SoftwarePatchLevel string

// .
type Function string

// Any additional information that could be useful to an auditor or reviewer.
type Comments string

// Product serial number or internal asset tag number.
type SerialNo string

// Virtual LAN or Network ID.
type NetworkId string

// The individual, title, or role who "owns" the asset on behalf of the// organization.
type AssetOwner struct {
	// Identifies the unique identifier for an individual, title, role, or team.
	PocId string `xml:"poc-id,attr,omitempty" json:"pocId,omitempty"`
	Value string `xml:",chardata" json:"value,omitempty"`
}

// The individual, title, role, or team responsible for operating and maintaining// the asset.
type AssetAdministrator struct {
	// Identifies the unique identifier for an individual, title, role, or team.
	PocId string `xml:"poc-id,attr,omitempty" json:"pocId,omitempty"`
	Value string `xml:",chardata" json:"value,omitempty"`
}

//
type ResponsibleRole struct {
	// In the context of a responsibility element, this points to a role in the users

	// element responsible for this control
	RoleId string `xml:"role-id,attr,omitempty" json:"roleId,omitempty"`
	Value  string `xml:",chardata" json:"value,omitempty"`
}

// The phrase or string that fills-in the parameter and completes the requirement
// statement.
type Value string

// Citation of a resource
type Citation struct {
	// .
	Id string `xml:"id,attr,omitempty" json:"id,omitempty"`

	// A relative or absolute URI indicating a resource available on the Internet.
	Href  *catalog.Href `xml:"href,attr,omitempty" json:"href,omitempty"`
	Value string        `xml:",chardata" json:"value,omitempty"`
}

// A line or paragraph with a hypertext link
type Link struct {
	// A relative or absolute URI indicating a resource available on the Internet.
	Href *catalog.Href `xml:"href,attr,omitempty" json:"href,omitempty"`

	// Purpose of the link
	Rel   string `xml:"rel,attr,omitempty" json:"rel,omitempty"`
	Value string `xml:",chardata" json:"value,omitempty"`
}

//
type Format string

//
type Date string

//
type AttachmentType string

//
type Base64 struct {
	// Name of the file before it was converted to Base-64. This is the name that will

	// be assigned to the file when converted back to binary.
	Filename string `xml:"filename,attr,omitempty" json:"filename,omitempty"`
	Value    string `xml:",chardata" json:"value,omitempty"`
}

// .
type Subcomponent string

// .
type Organization string

// .
type BaselineTemplate string

// .
type Scanned string

// The title under which this document is formally published
type Title string

// A named author
type Author string

// The official date of publication
type PublicationDate string

// Version information
type Version struct {
	// Please use YYYY-MM-DD syntax.
	IsoDate string `xml:"iso-date,attr,omitempty" json:"isoDate,omitempty"`
	Value   string `xml:",chardata" json:"value,omitempty"`
}

// Any sort of document identifier, name, code, path or other indicator of where// and how this document may be located, compared or validated. Given appropriate// qualification via its and , this value may point to or of the document.
type DocId struct {
	// Type designates the type of information provided.
	Type  string `xml:"type,attr,omitempty" json:"type,omitempty"`
	Value string `xml:",chardata" json:"value,omitempty"`
}

// A property associated with the document
type Prop struct {
	// Identifies the property or object within the control; a semantic hint
	Class string `xml:"class,attr,omitempty" json:"class,omitempty"`
	Value string `xml:",chardata" json:"value,omitempty"`
}

// An identifier for a person (such as an ORCID) using a designated scheme.
type PersonId struct {
	// Type designates the type of information provided.
	Type  string `xml:"type,attr,omitempty" json:"type,omitempty"`
	Value string `xml:",chardata" json:"value,omitempty"`
}

// An identifier for an organization using a designated scheme.
type OrgId struct {
	// Type designates the type of information provided.
	Type  string `xml:"type,attr,omitempty" json:"type,omitempty"`
	Value string `xml:",chardata" json:"value,omitempty"`
}

// Full (legal) name of an individual
type PersonName string

// Full (legal) name of an organization
type OrgName string

// A common name, short name or acronym
type ShortName string

// A single line of an address
type AddrLine string

// City, town or geographical region for mailing address
type City string

// State, province or analogous geographical region for mailing address
type State string

// Postal or ZIP code for mailing address
type PostalCode string

// Country for mailing address
type Country string

// Email address
type Email string

// Contact number by telephone
type Phone string

// URL for web site or Internet presence
type Url string

// A short description
type Desc string

// A document hash or other value subject to cryptographic authentication
type Hash struct {
	// Method by which a hash is derived
	Algorithm string `xml:"algorithm,attr,omitempty" json:"algorithm,omitempty"`
	Value     string `xml:",chardata" json:"value,omitempty"`
}

// Any customized or specialized metadata value.
type Meta struct {
	// A classification (according to any schema or taxonomy) of a metadata value or

	// set of values.
	Term string `xml:"term,attr,omitempty" json:"term,omitempty"`

	// Type designates the type of information provided.
	Type  string `xml:"type,attr,omitempty" json:"type,omitempty"`
	Value string `xml:",chardata" json:"value,omitempty"`
}

// Include all controls from the imported resource (catalog)
type All struct {
	// Whether subcontrols should be implicitly included, if not called.
	WithSubcontrols string `xml:"with-subcontrols,attr,omitempty" json:"withSubcontrols,omitempty"`
	Value           string `xml:",chardata" json:"value,omitempty"`
}

// The call element imports the component definition identified by the// @component-id attribute in the external component file.
type Call struct {
	// ID of a linked or imported component
	ComponentId string `xml:"component-id,attr,omitempty" json:"componentId,omitempty"`
	Value       string `xml:",chardata" json:"value,omitempty"`
}
